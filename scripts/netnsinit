#!/bin/bash

set -e

display_usage() {
	echo "Auto configuration for systemd-named-netns."
	echo -e "\nUsage:\n\t$0 network-type ns-name [optional params]\n"
	echo "Note: you may need root privileges for this."
}

autoconfigure_tunnel() {
	if [ ! -z "$MACADDR" ]; then
		/bin/ip link set ${DEVNAME_INSIDE} address ${MACADDR}
	fi
	if [ "${DHCPV4}" == "1" ]; then
		! mkdir -p /var/run/netns
		dhclient -v -i ${DEVNAME_INSIDE} -nw -pf /var/run/netns/dhclient-${NSNAME}.pid
	else
		if [ ! -z "${IPADDR}" ]; then
			/bin/ip address add ${IPADDR} dev ${DEVNAME_INSIDE}
		fi
		if [ ! -z "${GATEWAY}" ]; then
			/bin/ip route add default via ${GATEWAY%%/*}
		fi
	fi
	return 0 # additional precation against "set -e" in case of future mods of this function
}

# this is run for net type; inside netns
autoconfigure_nat() {

	# add default route if gateway undefined
	if [ -z "${GATEWAY}" -a -n "${IPADDR_OUTSIDE}" ]; then
		/bin/ip route add default via ${IPADDR_OUTSIDE%%/*}
	fi

	return 0 # additional precation against "set -e" in case of future mods of this function
}

# this is run for nat type; outside netns
autoconfigure_nat-access() {
	if [ "$3" == "up" ]; then
		# allow forwarding to make all these things work
		sysctl net.ipv4.ip_forward=1
		sysctl net.ipv6.conf.all.forwarding=1

		# set up NAT
		# in POSTROUTING we cannot select via source interface, so we use source ip address here
		iptables -t nat -A POSTROUTING -s ${IPADDR_OUTSIDE} -j MASQUERADE

		if [ "${NAT_ACCEPT_TRAFFIC}" == "1" ]; then
			iptables -A FORWARD -i ${DEVNAME_OUTSIDE} -j ACCEPT
			iptables -A FORWARD -o ${DEVNAME_OUTSIDE} -j ACCEPT
			#Accept related traffic
			iptables -I INPUT -i ${DEVNAME_OUTSIDE} -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
		fi
	elif  [ "$3" == "down" ]; then
		# remove NAT
		iptables -t nat -D POSTROUTING -s ${IPADDR_OUTSIDE} -j MASQUERADE

		iptables -D FORWARD -i ${DEVNAME_OUTSIDE} -j ACCEPT
		iptables -D FORWARD -o ${DEVNAME_OUTSIDE} -j ACCEPT
		iptables -D INPUT -i ${DEVNAME_OUTSIDE} -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
	fi

	return 0 # additional precation against "set -e" in case of future mods of this function
}

autoconfigure() {
	local NSTYPE=$1
	local NSNAME=$2

	echo "Starting autoconfigure for ${NSTYPE} ${NSNAME}"
  
	if [ "$NSTYPE" == "mvbr" ]; then
		DEVNAME_INSIDE=mv0
	else
		DEVNAME_INSIDE=vn-${NSNAME}1
		DEVNAME_OUTSIDE=vn-${NSNAME}0
	fi

	source /etc/default/netns
	! source "/etc/default/netns-${NSTYPE}"
	! source "/etc/default/netns-${NSNAME}" # for compatibility, see https://github.com/Jamesits/systemd-named-netns/pull/21
	! source "/etc/default/netns-${NSTYPE}-${NSNAME}"

	[[ $NSTYPE = "mvbr" ]] && SETUPTYPE="tunnel" || SETUPTYPE=$NSTYPE
	if type -t autoconfigure_$SETUPTYPE >/dev/null ; then
		autoconfigure_$SETUPTYPE "$@"
	fi

	echo "Autoconfiguration finished."
}

if [ $# == 0 ]; then
	display_usage
	exit 1
fi

case "$1" in
	"--help" | "-h")
		display_usage
		exit 0
		;;
	"tunnel"|"bridge"|"mvbr"|"nat"|"nat-access")
		autoconfigure "$@"
		exit 0
		;;
	*)
		echo "Unknown network type. Quitting."
		exit 1
		;;
esac
